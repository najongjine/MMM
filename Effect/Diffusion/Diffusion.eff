<Effect/>
<Type>Scene</Type>
<Name>Diffusion</Name>
<Author>mogg</Author>
<Version>1.0</Version>
<Description></Description>
<CommandDeclare>    
	int n = 0; 
	Matrix mat;
	</CommandDeclare>
<CommandInitialize></CommandInitialize>
<RenderCommands>
		//元のシーンをScnMapに描画する
		Context.SetRenderTarget("DepthBuffer", "ScnMap");
		Context.ClearColor(0, 0, 0, 0);
		Context.ClearDepth(1.0f);
		Context.DrawScene();

		//Gaussian_XパスをScnMap2に描画する
		Context.SetRenderTarget("DepthBuffer2", "ScnMap2");
		Context.ClearColor(0, 0, 0, 0);
		Context.ClearDepth(1.0f);
		Context.DrawPass("Gaussian_X");

		//Gaussian_Yパス(合成含)をデフォルトのレンダーターゲットに描画する
		Context.SetRenderTarget("", "");
		Context.ClearColor(0, 0, 0, 0);
		Context.ClearDepth(1.0f);
		Context.DrawPass("Gaussian_Y");
</RenderCommands>
<Code>

// ぼかし範囲(大きくしすぎると縞が出ます)
float Extent
<
   string UIName = "Extent";
   string UIWidget = "Slider";
   bool UIVisible =  true;
   float UIMin = 0.00;
   float UIMax = 0.01;
> = float( 0.002 );

// フィルタ強度
float Strength
<
   string UIName = "Strength";
   string UIWidget = "Slider";
   bool UIVisible =  true;
   float UIMin = 0.0;
   float UIMax = 1.0;
> = float( 0.7 );


//背景色
float4 ClearColor
<
   string UIName = "ClearColor";
   string UIWidget = "Color";
   bool UIVisible =  true;
> = float4(0,0,0,0);


//ぼかしのサンプリング数
#define SAMP_NUM 7


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
//これ以降はエフェクトの知識のある人以外は触れないこと

// マテリアル色
float4 MaterialDiffuse : DIFFUSE  < string Object = "Geometry"; >;
static float alpha1 = MaterialDiffuse.a;

float scaling0 : CONTROLOBJECT < string name = "(self)"; >;
static float scaling = scaling0 * 0.1;

float3 objpos : CONTROLOBJECT < string name = "(self)"; >;  

// スクリーンサイズ
float2 ViewportSize : VIEWPORTPIXELSIZE;
static const float2 SampStep = (float2(Extent, Extent) / ViewportSize * ViewportSize.y) * scaling;

// レンダリングターゲットのクリア値
float ClearDepth  = 1.0;


// オリジナルの描画結果を記録するためのレンダーターゲット
texture2D ScnMap : RENDERCOLORTARGET <
    float2 ViewPortRatio = {1.0,1.0};
    int MipLevels = 1;
	bool AntiAlias = true;
>;
// 深度バッファ
texture2D DepthBuffer : RENDERDEPTHSTENCILTARGET <
    float2 ViewPortRatio = {1.0,1.0};
    string Format = "D24_UNorm_S8_UInt";
	bool AntiAlias = true;
>;
// X方向のぼかし結果を記録するためのレンダーターゲット
texture2D ScnMap2 : RENDERCOLORTARGET <
    float2 ViewPortRatio = {1.0,1.0};
    int MipLevels = 1;
>;
// 深度バッファ
texture2D DepthBuffer2 : RENDERDEPTHSTENCILTARGET <
    float2 ViewPortRatio = {1.0,1.0};
    string Format = "D24_UNorm_S8_UInt";
>;
SamplerState ScnSamp
{
    Filter = Min_Mag_Mip_Linear;
    AddressU = CLAMP;
    AddressV = CLAMP;
};


////////////////////////////////////////////////////////////////////////////////////////////////
// 共通頂点シェーダ
struct VS_OUTPUT {
    float4 Pos            : SV_POSITION;
    float2 Tex            : TEXCOORD0;
};

VS_OUTPUT VS( float4 Pos : POSITION, float4 Tex : TEXCOORD0 )
{
    VS_OUTPUT Out = (VS_OUTPUT)0; 
    
    Out.Pos = Pos;
    Out.Tex = Tex;
    
    return Out;
}

////////////////////////////////////////////////////////////////////////////////////////////////
// 明度比較

float4 BrightnessCompare(float4 color1, float4 color2){
	
	color1.a = color2.a > color1.a ? color2.a : color1.a;
	
	float brightness1 = (color1.r * 0.29 + color1.g * 0.59 + color1.b * 0.12);
	float brightness2 = (color2.r * 0.29 + color2.g * 0.59 + color2.b * 0.12);
	
	if(brightness2 > brightness1)
		color1 = color2;
    
    return color1;
}

////////////////////////////////////////////////////////////////////////////////////////////////
// X方向ぼかし

float4 PS_passX(VS_OUTPUT VS_passDraw_output ) : SV_Target
{   
    float4 Color, sum = 0;
    float e, n = 0;
    
    [unroll] //ループ展開
    for(int i = -SAMP_NUM; i <= SAMP_NUM; i++){
        float2 stex = VS_passDraw_output.Tex + float2(SampStep.x * (float)i, 0);
        e = exp(-pow((float)i / (SAMP_NUM / 2.0), 2) / 2); //正規分布
        
        float4 org_color = ScnMap.Sample(ScnSamp, stex);
        org_color.rgb = pow(org_color.rgb, 2); //RGBを2乗
        sum += org_color * e;
        n += e;
    }
    
    Color = sum / n;
    return Color;
}

////////////////////////////////////////////////////////////////////////////////////////////////
// Y方向ぼかし + 合成

float4 PS_passY(VS_OUTPUT VS_passDraw_output) : SV_Target
{   
    float4 Color, sum = 0;
    float4 ColorSrc, ColorOrg;
    
    float e, n = 0;
    
    [unroll] //ループ展開
    for(int i = -SAMP_NUM; i <= SAMP_NUM; i++){
        float2 stex = VS_passDraw_output.Tex + float2(0, SampStep.y * (float)i);
        e = exp(-pow((float)i / (SAMP_NUM / 2.0), 2) / 2); //正規分布
        sum += ScnMap2.Sample(ScnSamp, stex) * e;
        n += e;
    }
    
    Color = sum / n;
    ColorOrg = ScnMap.Sample(ScnSamp, VS_passDraw_output.Tex.xy);
    ColorSrc = float4(pow(ColorOrg.rgb, 2), ColorOrg.a);
    
    //スクリーン合成
    Color.rgb = Color.rgb + ColorSrc.rgb - Color.rgb * ColorSrc.rgb;
    
    //比較(明)
	Color = BrightnessCompare(Color, ColorSrc);
    
    //簡易色調補正
    Color.rgb *= (objpos + 1);
    
    //フィルタ強度を元にオリジナルと合成
    Color = lerp(ColorOrg, Color, Strength * alpha1);
    
    return Color;
}

BlendState Diffusion_BlendState
{
    BlendEnable[0] = FALSE;
};


////////////////////////////////////////////////////////////////////////////////////////////////

technique10 Diffusion
{
    pass Gaussian_X {
        SetBlendState(Diffusion_BlendState, float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);
        SetVertexShader(CompileShader(vs_4_0, VS()));
        SetPixelShader(CompileShader(ps_4_0, PS_passX()));
    }
    pass Gaussian_Y {
        SetBlendState(Diffusion_BlendState, float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);
        SetVertexShader(CompileShader(vs_4_0, VS()));
        SetPixelShader(CompileShader(ps_4_0, PS_passY()));
    }
}

</Code>